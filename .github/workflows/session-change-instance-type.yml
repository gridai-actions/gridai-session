name: 'Workflow Session'
on:
  workflow_call:
    inputs:
      # CLI Environment Variations
      os:
        required: true
        type: string 
      # grid session variations
      name:
        required: true
        type: string
      instance_type:
        required: true
        type: string        
      use_spot:
        required: false
        type: string        
    secrets:
      # CLI Logins
      gridai-username:
        required: true
      gridai-key:
        required: true
jobs:
  unittests:
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        python-version: [3.8] #, 3.9]       
        python-venv: [""]     #  ,"venv"]     
    runs-on: ${{ inputs.os }}
    timeout-minutes: 60
    steps:

      - uses: gridai-actions/gridai-login@v0
        with:
          python-version: ${{ matrix.python-version }}
          python-venv: ${{ matrix.python-venv }}
          gridai-username: ${{ secrets.gridai-username }} 
          gridai-key: ${{ secrets.gridai-key }} 

      # create
      - id: gridai-obj-create
        run: |
          export GRID_ARGS=""
          if [ ! -z "${{inputs.use_spot}}" ]; then GRID_ARGS="--use_spot $GRID_ARGS"; fi

          gridai.py cli "grid session change-instance-type ${GRID_ARGS}" ${{inputs.name}} {{inputs.instance_type}} --gha True

      - run: |
          if [ "${{ steps.gridai-obj-create.outputs.match-status }}" != "running" ]; then
            echo "grid session: failed with ${{ steps.gridai-obj-create.outputs.error }}"
            exit 1
          fi

      # pause
      - id: gridai-obj-pause
        run: |
          gridai.py cli "grid session pause ${{ steps.gridai-obj-create.outputs.name }}"
      - id: gridai-obj-pause-2
        run: |
          gridai.py status_sess ${{ steps.gridai-obj-create.outputs.name }} --status3 'paused' --gha True
      - run: |
          if [ "${{ steps.gridai-obj-pause-2.outputs.match-status }}" != "paused" ]; then
            echo "grid session: failed with ${{ steps.gridai-obj-pause-2.outputs.error }}"
            exit 1
          fi

      # resume
      - id: gridai-obj-resume
        run: |
          gridai.py cli "grid session resume ${{ steps.gridai-obj-create.outputs.name }}"
      - id: gridai-obj-resume-2
        run: |
          gridai.py status_sess ${{ steps.gridai-obj-create.outputs.name }} --status3 'running' --gha True
      - run: |
          if [ "${{ steps.gridai-obj-resume-2.outputs.match-status }}" != "running" ]; then
            echo "grid session: failed with ${{ steps.gridai-obj-resume-2.outputs.error }}"
            exit 1
          fi

      # run commands, scp to and from
      - run: |
          # run some commands
          grid session ssh ${{ steps.gridai-obj-create.outputs.name }} "hostname; conda env list" | tee grid.session.ssh.1.log
          # scp to remote
          scp grid.session.ssh.1.log ${{ steps.gridai-obj-create.outputs.name }}:.
          # verify transfer
          grid session ssh ${{ steps.gridai-obj-create.outputs.name }} "ls grid.session.ssh.1.log" | tee grid.session.ssh.2.log
          if [ -z "$(grep grid.session.ssh.1.log grid.session.ssh.2.log)" ]; then
            echo "Error: file grid.session.ssh.1.log not found in remote"
            exit 1
          fi
          # scp from remote
          scp ${{ steps.gridai-obj-create.outputs.name }}:grid.session.ssh.1.log remote.grid.session.ssh.1.log
          diff grid.session.ssh.1.log remote.grid.session.ssh.1.log
          if [ $? -ne 0 ]; then
            echo "Error: grid.session.ssh.1.log remote.grid.session.ssh.1.log different"
            exit 1
          fi

      # delete
      - id: gridai-obj-delete
        run: |
          gridai.py cli "grid session delete ${{ steps.gridai-obj-create.outputs.name }}" --gha True
      - id: gridai-obj-delete-2
        run: |
          # status3=".*" will fail when a session in terminate state and additional polling is required
          gridai.py status_sess ${{ steps.gridai-obj-create.outputs.name }} --filter1_len 0 --status3 ".*" --gha True
      - run: |
          if [[ "${{ steps.gridai-obj-delete-2.outputs.obj-exit-code }}" == "0" && "${{ steps.gridai-obj-delete-2.outputs.filter1-cnt }}" == "0" ]]; then
            echo "session delete: success"
          else
            echo "session delete: fail - ${{ steps.gridai-obj-create.outputs.name }} still exists in ${{ steps.gridai-obj-create.outputs.match-status }}"
            exit 1
          fi         

