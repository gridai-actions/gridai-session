name: 'Workflow Session Create'
on:
  workflow_call:
    inputs:
      # CLI Environment Variations
      os:
        required: true
        type: string 
      # grid session variations
      grid-args:
        required: false
        default: "" 
        type: string
      name:
        required: false
        default: s$(date '+%y%m%d-%H%M%S') 
        type: string
      description:
        required: false
        type: string
      cluster:
        required: false
        type: string
      instance_type:
        required: false
        type: string        
      use_spot:
        required: false
        type: string        
      disk_size:
        required: false
        type: string        
      datastore_name:
        required: false
        type: string        
      datastore_version:
        required: false
        type: string        
      datastore_mount_dir:
        required: false
        type: string      
      # CLI Logins
      gridai-url:
        defaults: ""
        type: string        
        required: false          
    secrets:
      # CLI Logins
      gridai-username:
        required: true
      gridai-key:
        required: true
    outputs:    
      name:
        description: "name of session"
        value: ${{ steps.gridai-obj-create.outputs.name }} 
jobs:
  unittests:
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        python-version: [3.8] #, 3.9]       
        python-venv: [""]     #  ,"venv"]     
    runs-on: ${{ inputs.os }}
    timeout-minutes: 60
    steps:

      - uses: gridai-actions/gridai-login@v0
        with:
          python-version: ${{ matrix.python-version }}
          python-venv: ${{ matrix.python-venv }}
          gridai-username: ${{ secrets.gridai-username }} 
          gridai-key: ${{ secrets.gridai-key }} 
          gridai-url: ${{ inputs.grid-url }}

      # create
      - id: gridai-obj-create
        run: |
          export GRID_ARGS="${{grid-args}}"
          if [ ! -z "${{inputs.name}}" ]; then GRID_ARGS="--name ${{inputs.name}} $GRID_ARGS"; fi
          if [ ! -z "${{inputs.cluster}}" ]; then GRID_ARGS="--cluster ${{inputs.cluster}} $GRID_ARGS"; fi
          if [ ! -z "${{inputs.description}}" ]; then GRID_ARGS="--description ${{inputs.description}} $GRID_ARGS"; fi
          if [ ! -z "${{inputs.instance_type}}" ]; then GRID_ARGS="--instance_type ${{inputs.instance_type}} $GRID_ARGS"; fi
          if [ ! -z "${{inputs.use_spot}}" ]; then GRID_ARGS="--use_spot $GRID_ARGS"; fi
          if [ ! -z "${{inputs.disk_size}}" ]; then GRID_ARGS="--disk_size ${{inputs.disk_size}} $GRID_ARGS"; fi
          if [ ! -z "${{inputs.datastore_name}}" ]; then GRID_ARGS="--datastore_name ${{inputs.datastore_name}} $GRID_ARGS"; fi
          if [ ! -z "${{inputs.datastore_version}}" ]; then GRID_ARGS="--datastore_version ${{inputs.datastore_version}} $GRID_ARGS"; fi
          if [ ! -z "${{inputs.datastore_mount_dir}}" ]; then GRID_ARGS="--datastore_mount_dir ${{inputs.datastore_mount_dir}} $GRID_ARGS"; fi

          gridai.py create_sess --grid_args " ${GRID_ARGS}" --gha True

      - run: |
          if [ "${{ steps.gridai-obj-create.outputs.match-status }}" != "running" ]; then
            echo "grid session: failed with ${{ steps.gridai-obj-create.outputs.error }}"
            exit 1
          fi