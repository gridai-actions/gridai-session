name: 'Workflow Session'
on:
  workflow_call:
    inputs:
      # CLI Environment Variations
      os:
        required: true
        type: string 
      # grid session variations
      name:
        required: false
        default: s$(date '+%y%m%d-%H%M%S') 
        type: string
      description:
        required: false
        type: string
      cluster:
        required: false
        type: string
      instance_type:
        required: false
        type: string        
      use_spot:
        required: false
        type: string        
      disk_size:
        required: false
        type: string        
      datastore_name:
        required: false
        type: string        
      datastore_version:
        required: false
        type: string        
      datastore_mount_dir:
        required: false
        type: string        
    secrets:
      # CLI Logins
      gridai-username:
        required: true
      gridai-key:
        required: true
jobs:
  unittests:
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        python-version: [3.8, 3.9]       
        python-venv: ["","venv"]     
    runs-on: ${{ inputs.os }}
    timeout-minutes: 60
    steps:
      - uses: gridai-actions/gridai-login@main
        with:
          python-version: ${{ matrix.python-version }}
          python-venv: ${{ matrix.python-venv }}
          gridai-username: ${{ secrets.gridai-username }} 
          gridai-key: ${{ secrets.gridai-key }} 
      - id: gridai-obj-create
        run: |
          export GRID_ARGS=""
          if [ ! -z "${{inputs.name}}" ]; then GRID_ARGS="--name ${{inputs.name}} $GRID_ARGS"; else fi
          if [ ! -z "${{inputs.description}}" ]; then GRID_ARGS="--description ${{inputs.description}} $GRID_ARGS"; fi
          if [ ! -z "${{inputs.cluster}}" ]; then GRID_ARGS="--cluster ${{inputs.cluster}} $GRID_ARGS"; fi
          if [ ! -z "${{inputs.instance_type}}" ]; then GRID_ARGS="--instance_type ${{inputs.instance_type}} $GRID_ARGS"; fi
          if [ ! -z "${{inputs.use_spot}}" ]; then GRID_ARGS="--use_spot $GRID_ARGS"; fi
          if [ ! -z "${{inputs.disk_size}}" ]; then GRID_ARGS="--disk_size ${{inputs.disk_size}} $GRID_ARGS"; fi
          if [ ! -z "${{inputs.datastore_name}}" ]; then GRID_ARGS="--datastore_name ${{inputs.datastore_name}} $GRID_ARGS"; fi
          if [ ! -z "${{inputs.datastore_version}}" ]; then GRID_ARGS="--datastore_version ${{inputs.datastore_version}} $GRID_ARGS"; fi
          if [ ! -z "${{inputs.datastore_mount_dir}}" ]; then GRID_ARGS="--datastore_mount_dir ${{inputs.datastore_mount_dir}} $GRID_ARGS"; fi

          gridai.py cli "grid session create ${GRID_ARGS}" status_to_kv --gha True
      - id: gridai-obj-status
        run: |
          gridai.py session ${{ steps.gridai-obj-create.outputs.name }} --gha True
      - run: |
          if [ -z "$(echo ${{ steps.gridai-obj-status.outputs.obj-summary }} | grep -i 'running')" ]; then
            exit 1
          fi             
      - id: gridai-obj-delete
        run: |
          gridai.py cli "grid session delete ${{ steps.gridai-obj-create.outputs.name }}" --gha True
         

