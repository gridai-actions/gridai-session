name: "Grid.ai Session"
inputs:
  # optional    
  cluster-name:
    required: false
    default: ""
    type: string    
    description: "Cluster name to use"
  grid-args:
    required: false
    default: "--instance_type t2.medium"
    type: string    
    description: "Arguments to grid session create command"
  script-args:
    required: false
    default: ""
    type: string
    description: "Arguments to the script"
  success-status:
    required: false
    default: "^running$"
    type: string               
    description: "regular expresseion to grep checking status"
outputs:
  obj-type:
    value: ${{ steps.gridai-obj-status.outputs.obj-type }}
    description: "object id searched for"
  obj-id:
    value: ${{ steps.gridai-obj-status.outputs.obj-id }}
    description: "object id searched for"
  obj-status:
    value: ${{ steps.gridai-obj-status.outputs.obj-status }}
    description: "comma delimited status all of objects. ex: succeeded,succeeded,stopped"
  obj-tally:
    value: ${{ steps.gridai-obj-status.outputs.obj-tally }}
    description: "comma delimited tally status codes. ex: 2 succeeded,1 stopped"
  obj-summary:
    value: ${{ steps.gridai-obj-status.outputs.obj-summary }}
    description: "comma delimited unique status codes. ex: succeeded,stopped"
  obj-exit-code:
    value: ${{ steps.gridai-obj-status.outputs.obj-exit-code }}
    description: "0 if exited finding the supplied status, 1 otherwise"   
runs:
  using: "composite"
  steps:
    - run: |
        grid session create ${{ inputs.cluster-name }} ${{ inputs.grid-args }} | tee grid.session.log
        export obj_id=$(cat grid.session.log | awk -F':' '$1 ~ /^ +name$/ {print $2}' | tr -s '[:blank:]')
        if [ -z "${obj_id}" ]; then
          echo "Error: 'name:[session name]' not found in output"
          exit 1
        else
          echo "obj_id=${obj_id}" >> $GITHUB_ENV             
        fi  
      shell: bash  
    - id: gridai-obj-status
      uses: gridai-actions/gridai-status@main
      with:
        obj-type: session
        obj-id: ${obj_id}
    - run: |
        if [ -z "$(echo ${{ steps.gridai-obj-status.outputs.obj-summary }} | grep '${{ inputs.success-status }}')" ]; then
          exit 1
        fi             
      shell: bash  
